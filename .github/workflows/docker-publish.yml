# OCSF MCP Server - Docker Build & Publish Workflow
# Maintainer: Anubhav Gain (anubhavg-cipl) <anubhavg@infopercept.com>
#
# Automated multi-architecture Docker image builds and publishing to Docker Hub

name: Docker Build & Publish

on:
  push:
    branches:
      - master
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to Docker Hub'
        required: true
        default: 'false'
        type: boolean

env:
  DOCKER_USERNAME: anubhavgicpl
  IMAGE_NAME: ocsf-mcp
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-and-test:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    environment: Docker Hub
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "Testing Docker image..."
          docker run --rm ${{ env.IMAGE_NAME }}:test --help || echo "Help command test completed"

          echo "Testing MCP protocol initialization..."
          echo '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{}}' | \
            timeout 5s docker run -i --rm ${{ env.IMAGE_NAME }}:test || true

          echo "Checking image size..."
          docker images ${{ env.IMAGE_NAME }}:test --format "Size: {{.Size}}"

      - name: Run security scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push multi-arch image
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            maintainer=Anubhav Gain <anubhavg@infopercept.com>
            org.opencontainers.image.authors=Anubhav Gain (anubhavg-cipl)
            org.opencontainers.image.vendor=InfoPercept
            io.docker.mcp.server=true
            io.docker.mcp.transport=stdio
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Generate build summary
        if: success()
        run: |
          echo "## Docker Build Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`${{ env.PLATFORMS }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Ref:** \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags Published" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Update Docker Hub description
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          repository: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md
          short-description: "MCP server for OCSF schema management and security logging code generation"
        continue-on-error: true

  notify:
    name: Notify on Success
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success() && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Success notification
        run: |
          echo "âœ… Docker image successfully built and published!"
          echo "ðŸ“¦ Image: docker pull ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
          echo "ðŸ”— Docker Hub: https://hub.docker.com/r/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
